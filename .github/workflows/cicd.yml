name: Stock Data API Build / Test / Deploy
run-name: ${{ github.event.repository.updated_at}}_${{ github.run_number }}_${{ github.ref }}
on:
  workflow_dispatch:
    branches:
      - '**'
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - dev
      - main

env:
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
  ARM_ACR_CLIENT_ID: ${{ secrets.ARM_ACR_CLIENT_ID }}
  ARM_ACR_CLIENT_SECRET: ${{ secrets.ARM_ACR_CLIENT_SECRET }}
  ARM_ACR_SUBSCRIPTION_ID: ${{ secrets.ARM_ACR_SUBSCRIPTION_ID }}
  APP_LANDING_ZONE: 'environments'
  APP_LANDING_ZONE_ROOT_PATH: ${{ github.workspace }}
  APP_NAMES: 'api'
  APP_AUTO_WORKING_FOLDER: "./"
  APP_AUTO_WORKING_PATH: ${{ github.workspace }}
  ENVIRONMENT: ${{ fromJSON('["dev", "prd"]')[github.ref == 'refs/heads/main'] }}

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - id: set-matrix
        shell: pwsh
        run: |
          $matrix = @()
          $apps = "$($env:APP_NAMES)" -split ','
          foreach($app in $apps){
            $matrix += "{`"app`":`"$app`"}"
          }
          Write-Host("::set-output name=matrix::{`"include`":[$($matrix -join ',')]}")

  test:
    if: ${{ github.event_name == 'pull_request' || github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    needs: prepare
    strategy:
      matrix: ${{ fromJSON(needs.prepare.outputs.matrix) }}
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v3
      - name: Test the application
        uses: piroinno/stock-data-app-automation/test/poetry/@init
        with:
          packagefeed: ${{ secrets.AZURE_PYPI_FEED }}
          packagefeedpassword: ${{ secrets.AZURE_PYPI_PASSWORD }}
          testdatabasehost: localhost
          testdatabasepassword: ${{ secrets.POSTGRES_PASSWORD }}
          appfolder: ${{ matrix.app }}
          flagsmithenvironmentkey: ${{ secrets.FLAG_SMITH_ENVIRONMENT_KEY }}

  build:
    runs-on: ubuntu-latest
    needs: [prepare, test]
    strategy:
      matrix: ${{ fromJSON(needs.prepare.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v3
      - name: Build docker image
        uses: piroinno/stock-data-app-automation/build/docker/@init
        with:
          appfolder: ${{ matrix.app }}
          applicationbuildphase: "build"
          automatedrun: "true"
          isbuilddryrun: "false"
          applicationbuildtags: "${{ env.ENVIRONMENT }},latest"
          applicationbuildimagename: "${{ matrix.app }}"
          applicationbuildimageregistry: "${{ secrets.ACR_LOGIN_SERVER }}"
          applicationbuilddefaulttag: "${{ github.sha }}"
          applicationbuildimagerepository: "${{ env.APP_LANDING_ZONE}}/application"
          applicationbuilddockerfile: "Dockerfile"
          applicationbuilddockerfileargs: "FLAG_SMITH_ENVIRONMENT_KEY=${{ secrets.FLAG_SMITH_ENVIRONMENT_KEY }},AZURE_PYPI_FEED=${{ secrets.AZURE_PYPI_FEED }}/simple,AZURE_PYPI_PASSWORD=${{ secrets.AZURE_PYPI_PASSWORD }}"

  deploy:
    runs-on: ubuntu-latest
    needs: [prepare, test, build]
    if: ${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev' }}
    strategy:
      matrix: ${{ fromJSON(needs.prepare.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v3
      - name: Set environment variables
        run: |
          if($ENVIRONMENT -eq "prd"){
            "APP_DOMAIN=${{ secrets.APP_DOMAIN_PRD }}" >> $env:GITHUB_ENV
            "APP_CERT_SECRET=${{ secrets.APP_CERT_SECRET_PRD }}" >> $env:GITHUB_ENV
            "CERT_ISSUER=${{ secrets.CERT_ISSUER_PRD }}" >> $env:GITHUB_ENV
          }else{
            "APP_DOMAIN=${{ secrets.APP_DOMAIN_DEV }}" >> $env:GITHUB_ENV
            "APP_CERT_SECRET=${{ secrets.APP_CERT_SECRET_DEV }}" >> $env:GITHUB_ENV
            "CERT_ISSUER=${{ secrets.CERT_ISSUER_DEV }}" >> $env:GITHUB_ENV
          }
        
      - name: Deploy manifest
        uses: piroinno/stock-data-app-automation/deploy/manifest/@init
        with:
          mainbranch: ${GITHUB_REF##*/}
          statebranch: "state.${{ env.ENVIRONMENT }}"
          prmessage: "PR: ${{ github.event.pull_request.title }}"
          approotpath: ${{ env.APP_LANDING_ZONE_ROOT_PATH }}/${{ matrix.app }}
          substitute: "IMAGE='${{ secrets.ACR_LOGIN_SERVER }}/${{ env.APP_LANDING_ZONE}}/application/${{ matrix.app }}:${{ env.ENVIRONMENT }}',CERT_ISSUER='${{ env.CERT_ISSUER}}',APP_DOMAIN='${{ env.APP_DOMAIN}}',APP_CERT_SECRET='${{ secrets.APP_CERT_SECRET}}'"