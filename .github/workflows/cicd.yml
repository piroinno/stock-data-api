name: Stock Data API Build / Test / Deploy
run-name: ${{ github.event.repository.updated_at}}_${{ github.run_number }}_${{ github.ref }}
on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - dev
      - main
jobs:
  build:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v3
      - name: Setting up Python 3.11
        uses: actions/setup-python@v2
        id: installed-python-version
        with:
          python-version: 3.11
      - name: Installing and configuring Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.3.2
          virtualenvs-create: true
          virtualenvs-path: ~/.venv
          virtualenvs-in-project: false
          installer-parallel: true
      - name: Using Cache for Poetry Dependencies
        uses: actions/cache@v2
        id: cached-dependencies
        with:
          path: ~/.venv
          key: venv-${{ runner.os }}-${{ steps.installed-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Installing dependencies
        run: |
          poetry source add --secondary pypifeed "https://${{ secrets.AZURE_PYPI_FEED }}"
          poetry config http-basic.pypifeed pypifeed ${{ secrets.AZURE_PYPI_PASSWORD }}
          poetry install
        if: steps.cached-dependencies.outputs.cache-hit != 'true'
      - name: Linting with flake8
        run: |
          pip install flake8
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - name: Testing with pytest
        run: |
          pip install pytest
          poetry run python -m pytest
        env:
          DATABASE_URL: postgresql://postgres:${{ secrets.POSTGRES_PASSWORD }}@localhost:5432/postgres
          FLAG_SMITH_ENVIRONMENT_KEY: ${{ secrets.FLAG_SMITH_ENVIRONMENT_KEY }}
      - name: Build Image
        run: |
          docker build -t stock-data-api --build-arg AZURE_PYPI_PASSWORD=${{ secrets.AZURE_PYPI_PASSWORD }} --build-arg AZURE_PYPI_FEED=${{ secrets.AZURE_PYPI_FEED }} .
  
  # ${{ if github.ref == 'refs/heads/main' or github.ref == 'refs/heads/dev' or github.ref == 'refs/heads/uat' }}:
  #   deploy:
  